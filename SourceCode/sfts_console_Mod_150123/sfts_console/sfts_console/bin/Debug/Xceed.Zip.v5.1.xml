<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Xceed.Zip.v5.1</name>
  </assembly>
  <members>
    <member name="T:Xceed.Utils.Collections.ListBase">
      <summary>Represents any type of list.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ArrayAdd(System.Object)">
      <summary>Adds an item to the array.</summary>
      <returns>The index at which the new item was inserted.</returns>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ArrayClear">
      <summary>Removes all items from the array.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ArrayInit(System.Object[])">
      <summary>Initializes the array and populates it with the specified objects.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ArrayInsert(System.Int32,System.Object)">
      <summary>Inserts an item into the array at the specified index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ArrayRemoveAt(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.CopyTo(System.Array,System.Int32)">
      <summary>Copies the items of the  to an array, starting at a particular array index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.EnsureCapacity(System.Int32)">
      <summary>Ensures that the capacity of this instance of the list is at least the specified value.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.InternalAdd(System.Object)">
      <summary>Adds an item to the list.</summary>
      <returns>The index at which the new item was inserted.</returns>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.InternalClear">
      <summary>Removes all items from the list.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.InternalInsert(System.Int32,System.Object)">
      <summary>Inserts an item to the list at the specified index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.InternalRemove(System.Object)">
      <summary>Removes the first occurrence of <paramref name="value" /> from the list.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.InternalRemoveAt(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.InternalSetItem(System.Int32,System.Object)">
      <summary>Sets the item at the specified index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListAdd(System.Object)">
      <summary>Adds an item to the list.</summary>
      <returns>The index at which the new item was inserted.</returns>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListClear">
      <summary>Removes all items from the list.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListContains(System.Object)">
      <summary>Retrieves a boolean value indicating if the item exists in the list.</summary>
      <returns>true if the item is found in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListGetItem(System.Int32)">
      <summary>Retrieves the item at the specified index.</summary>
      <returns>A reference to the item located at <paramref name="index" />.</returns>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListIndexOf(System.Object)">
      <summary>Searches for the specified item in the list and returns the zero-based index of the first occurrence.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListInsert(System.Int32,System.Object)">
      <summary>Inserts an item to the list at the specified index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListRemove(System.Object)">
      <summary>Removes the first occurrence of <paramref name="value" /> from the list.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListRemoveAt(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.ListSetItem(System.Int32,System.Object)">
      <summary>Sets the item at the specified index.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnClear(System.Boolean@)">
      <summary>Performs additional custom processes when clearing the contents of the  instance.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnClearComplete">
      <summary>Performs additional custom processes after clearing the contents of the  instance.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnInsert(System.Int32@,System.Object,System.Boolean@)">
      <summary>Performs additional custom processes before inserting a new item into the  instance.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>Performs additional custom processes after inserting a new item into the  instance.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnRemove(System.Int32,System.Object,System.Boolean@)">
      <summary>Performs additional custom processes when removing an item from the  instance.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>Performs additional custom processes after removing an item from the  instance.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnSet(System.Int32,System.Object,System.Object,System.Boolean@)">
      <summary>Performs additional custom processes before setting a value in the  instance.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes after setting a value in the  instance.</summary>
    </member>
    <member name="M:Xceed.Utils.Collections.ListBase.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="P:Xceed.Utils.Collections.ListBase.Array">
      <summary>Gets an array containing the contents of the list.</summary>
    </member>
    <member name="P:Xceed.Utils.Collections.ListBase.Count">
      <summary>Gets the number of items contained in the .</summary>
    </member>
    <member name="P:Xceed.Utils.Collections.ListBase.IsFixedSize">
      <summary>Gets a boolean value indicating whether the list has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Utils.Collections.ListBase.IsReadOnly">
      <summary>Gets a boolean value indicating if the list is readonly.</summary>
    </member>
    <member name="P:Xceed.Utils.Collections.ListBase.IsSynchronized">
      <summary>Gets a boolean value indicating if access to the  is synchronized (thread-safe).</summary>
    </member>
    <member name="P:Xceed.Utils.Collections.ListBase.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the .</summary>
    </member>
    <member name="T:Xceed.Zip.IAesAlgorithmManager">
      <summary>Defines a method to create instances of SymmetricAlgorithm-derived classes that implement the AES algorithm for use in the
EncryptionMethod.WinZipAES functionality.</summary>
    </member>
    <member name="M:Xceed.Zip.IAesAlgorithmManager.CreateAesAlgorithm">
      <summary>
        <para>Creates an instance of a SymmetricAlgorithm-derived class that implements the AES algorithm for use in the EncryptionMethod.WinZipAES
functionality.</para>
      </summary>
      <returns>
        <para>An instance of a SymmetricAlgorithm-derived class. Can return null.</para>
      </returns>
    </member>
    <member name="T:Xceed.Zip.DiskRequiredAction">
      <summary>Value representing the action to take once a new disk has been provided.</summary>
    </member>
    <member name="T:Xceed.Zip.DiskRequiredReason">
      <summary>Value representing the reason why a new disk or split part is required.</summary>
    </member>
    <member name="T:Xceed.Zip.EncryptionMethod">
      <summary>Encryption method to use to encrypt a file when an encryption password is provided, or encryption method detected when reading an encrypted file.</summary>
    </member>
    <member name="T:Xceed.Zip.ExtraHeaders">
      <summary>Value representing the supplemental file information that is read from and written to a zip file.</summary>
    </member>
    <member name="T:Xceed.Zip.FolderPersistence">
      <summary>Value representing the condition under which a folder entry is persisted in a Zip file.</summary>
    </member>
    <member name="T:Xceed.Zip.SplitNameFormat">
      <summary>Value representing the naming convention the split zip file parts will follow.</summary>
    </member>
    <member name="T:Xceed.Zip.TextEncoding">
      <summary>Value representing the text encoding used in the header of zipped file and folder items. The filename and comment fields are affected by this
value.</summary>
    </member>
    <member name="T:Xceed.Zip.UnicodeUsagePolicy">
      <summary>Value representing the policy to apply when Unicode text is used either through the TextEncoding property or through the Unicode, UTF8Filename or
UTF8Comment extra headers.</summary>
    </member>
    <member name="T:Xceed.Zip.DiskRequiredEventArgs">
      <summary>Provides information regarding the zip file that is being spanned or split.</summary>
    </member>
    <member name="T:Xceed.Zip.InvalidDecryptionPasswordException">
      <summary>Exception that is thrown when the data could not be decrypted with the supplied decryption password.</summary>
    </member>
    <member name="T:Xceed.Zip.InvalidZipStructureException">
      <summary>Exception that is thrown when the internal structure of a ZIP file is invalid.</summary>
    </member>
    <member name="T:Xceed.Zip.Licenser">
      <summary>Class which is used to register the classes located in the Xceed.Zip namespace.</summary>
    </member>
    <member name="T:Xceed.Zip.QuickZip">
      <summary>Exposes static methods that allow basic zip file operations.</summary>
    </member>
    <member name="T:Xceed.Zip.QuickZipException">
      <summary>Exception that is thrown when an error occurs in a method of the  class.</summary>
    </member>
    <member name="T:Xceed.Zip.QuickZipItem">
      <summary>Represents an item located within a zip file and exposes properties that get information in regards to the item.</summary>
    </member>
    <member name="T:Xceed.Zip.ZipArchive">
      <summary>Specialization of the  class that represents the root folder in a ZIP file, i.e., the ZIP file itself.</summary>
    </member>
    <member name="T:Xceed.Zip.ZipEvents">
      <summary>Class that dispatches events associated with zip operations performed on , <see cref="T:Xceed.Zip.ZippedFolder" /> or
<see cref="T:Xceed.Zip.ZipArchive" /> objects.</summary>
    </member>
    <member name="T:Xceed.Zip.ZipEventsSession">
      <summary>Class which derives from the  class and holds information about the session which is responsible for
raising all events that occur during the process.</summary>
    </member>
    <member name="T:Xceed.Zip.ZipException">
      <summary>Exception that is thrown when an error occurs in the Xceed.Zip namespace.</summary>
    </member>
    <member name="T:Xceed.Zip.ZipIOException">
      <summary>Exception that is thrown when an IO exception occurs while reading from or writing to the ZIP file.</summary>
    </member>
    <member name="T:Xceed.Zip.ZippedFile">
      <summary>Specialization of the  class that implements access to a file stored within a ZIP file.</summary>
    </member>
    <member name="T:Xceed.Zip.ZippedFolder">
      <summary>Specialization of the  class that implements access to a folder stored in a ZIP file.</summary>
    </member>
    <member name="P:Xceed.Zip.DiskRequiredEventArgs.Action">
      <summary>Gets or sets a value indicating if the current operation should be aborted or if it should attempt to continue.</summary>
    </member>
    <member name="P:Xceed.Zip.DiskRequiredEventArgs.DiskNumber">
      <summary>Gets the number of the next required disk.</summary>
    </member>
    <member name="P:Xceed.Zip.DiskRequiredEventArgs.Reason">
      <summary>Gets a  value indicating the reason why a new disk is required.</summary>
    </member>
    <member name="P:Xceed.Zip.DiskRequiredEventArgs.SplitSize">
      <summary>Gets or sets a value representing the size, in bytes, of the next split part to be created in the case where the zip file is being split (not
necessarily spanned).</summary>
    </member>
    <member name="P:Xceed.Zip.DiskRequiredEventArgs.ZipFile">
      <summary>Gets or sets the next zip file to write to or read from.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidDecryptionPasswordException.#ctor">
      <summary>Initializes a new instance of the InvalidDecryptionPasswordException class.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidDecryptionPasswordException.#ctor(System.String)">
      <summary>Initializes a new instance of the InvalidDecryptionPasswordException class with the specified message text.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidDecryptionPasswordException.#ctor(Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the InvalidDecryptionPasswordException class with the specified  object.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidDecryptionPasswordException.#ctor(System.String,Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the InvalidDecryptionPasswordException class with the specified message text and 
object.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidDecryptionPasswordException.#ctor(Xceed.FileSystem.AbstractFile,System.Exception)">
      <summary>Initializes a new instance of the InvalidDecryptionPasswordException class with the specified  object and inner
exception.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidDecryptionPasswordException.#ctor(System.String,Xceed.FileSystem.AbstractFile,System.Exception)">
      <summary>Initializes a new instance of the InvalidDecryptionPasswordException class with the specified message text, 
object and inner exception.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidZipStructureException.#ctor">
      <summary>Initializes a new instance of the InvalidZipStructureException class.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidZipStructureException.#ctor(System.String)">
      <summary>Initializes a new instance of the InvalidZipStructureException class with the specified message text.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidZipStructureException.#ctor(Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the InvalidZipStructureException class with the specified  object.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidZipStructureException.#ctor(System.String,Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the InvalidZipStructureException class with the specified message text and 
object.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidZipStructureException.#ctor(Xceed.FileSystem.AbstractFile,System.Exception)">
      <summary>Initializes a new instance of the InvalidZipStructureException class with the specified  object and inner
exception.</summary>
    </member>
    <member name="M:Xceed.Zip.InvalidZipStructureException.#ctor(System.String,Xceed.FileSystem.AbstractFile,System.Exception)">
      <summary>Initializes a new instance of the InvalidZipStructureException class with the specified message text,  object
and inner exception.</summary>
    </member>
    <member name="P:Xceed.Zip.Licenser.LicenseKey">
      <summary>Gets or sets the license key used to license this product.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.GetZipContents(System.String,System.String[])">
      <summary>Gets the content of a zip file.</summary>
      <returns>An array of  objects that contain information regarding each file retrieved.</returns>
    </member>
    <member name="M:Xceed.Zip.QuickZip.GetZipContents(System.String,System.Boolean,System.String[])">
      <summary>Gets the contents of the provided zip file.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.GetZipContents(System.String,System.String,System.Boolean,System.String[])">
      <summary>Gets the contents of the provided zip file.</summary>
      <returns>An array of  objects that contain information regarding each file retrieved.</returns>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Remove(System.String,System.String[])">
      <summary>Removes files from a zip file.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Remove(System.String,System.Boolean,System.String[])">
      <summary>Removes files from a zip file specifying if files contained within sub-folders will also be removed.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Unzip(System.String,System.String,System.String[])">
      <summary>Extracts files from a zip file overwriting existing files and restoring the directory structure.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Unzip(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String[])">
      <summary>Extracts files from a zip file specifying whether existing files will be overwritten and if the directory structure will be restored.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Unzip(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String[])">
      <summary>Extracts files from a zip file providing a decryption password and specifying whether existing files will be overwritten and if the directory
structure will be restored.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Unzip(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Zip.QuickZip.DiskRequiredCallback,System.Object,System.String[])">
      <summary>Extracts files from a spanned zip file specifying the callback method called when requesting a new disk, providing a decryption password and
specifying whether existing files will be overwritten and if the directory structure will be restored.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Unzip(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Zip.QuickZip.DiskRequiredCallback,Xceed.Zip.QuickZip.ByteProgressionCallback,Xceed.Zip.QuickZip.ItemProgressionCallback,System.Object,System.String[])">
      <summary>Extracts files from a zip file overwriting existing files and restoring the directory structure, using the provided decryption password, and
tracking item or byte progression.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String[])">
      <summary>Adds files recursively to a zip file overwriting existing files and preserving the directory structure.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.Boolean,System.Boolean,System.Boolean,System.String[])">
      <summary>Adds files to a zip file specifying whether existing files will be overwritten and if the directory structure will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String[])">
      <summary>Adds files to a zip file using an encryption password and specifying whether existing files will be overwritten and if the directory structure
will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,Xceed.Zip.EncryptionMethod,System.Boolean,System.Boolean,System.Boolean,System.String[])">
      <summary>Adds files to a zip file using an encryption password and specifying an encryption mehtod, whether existing files will be overwritten and if the
directory structure will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,Xceed.Zip.EncryptionMethod,Xceed.Compression.CompressionMethod,System.Boolean,System.Boolean,System.Boolean,System.String[])">
      <summary>Adds files to a zip file using an encryption password and specifying an encryption mehtod, whether existing files will be overwritten and if the
directory structure will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int64,Xceed.Zip.SplitNameFormat,System.String[])">
      <summary>Adds files to a multi-part zip file using the specified split name format, the specified split size, an encryption password and specifying
whether existing files will be overwritten and if the directory structure will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,Xceed.Zip.EncryptionMethod,System.Boolean,System.Boolean,System.Boolean,System.Int64,Xceed.Zip.SplitNameFormat,System.String[])">
      <summary>Adds files to a multi-part zip file using the specified split name format, the specified split size, an encryption method and password, and
specifying whether existing files will be overwritten and if the directory structure will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Zip.QuickZip.DiskRequiredCallback,System.Object,System.String[])">
      <summary>Adds files to a spanned zip file specifying the callback method called when requesting a new disk, using an encryption password and specifying
whether existing files will be overwritten and if the directory structure will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,Xceed.Zip.EncryptionMethod,System.Boolean,System.Boolean,System.Boolean,Xceed.Zip.QuickZip.DiskRequiredCallback,System.Object,System.String[])">
      <summary>Adds files to a spanned zip file specifying the callback method called when requesting a new disk, using an encryption password and method, and
specifying whether existing files will be overwritten and if the directory structure will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Zip.Sfx.XceedSfxPrefix,System.String[])">
      <summary>Adds files to a self-extracting zip file specifying an XceedSfxPrefix which will be used as the source module, using an encryption password and
specifying whether existing files will be overwritten and if the directory structure will be preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Zip.Sfx.XceedSfxPrefix,Xceed.Zip.QuickZip.DiskRequiredCallback,System.Object,System.String[])">
      <summary>Adds files to a self-extracting spanned zip file specifying an XceedSfxPrefix which will be used as the source module, the callback method called
when requesting a new disk, using an encryption password and specifying whether existing files will be overwritten and if the directory structure will be
preserved.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,Xceed.Zip.EncryptionMethod,System.Boolean,System.Boolean,System.Boolean,System.Int64,Xceed.Zip.SplitNameFormat,Xceed.Zip.Sfx.XceedSfxPrefix,Xceed.Zip.QuickZip.DiskRequiredCallback,Xceed.Zip.QuickZip.ByteProgressionCallback,Xceed.Zip.QuickZip.ItemProgressionCallback,System.Object,System.String[])">
      <summary>Adds files to a zip file using an encryption password and either splitting or spanning. Item or byte progression is tracked.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZip.Zip(System.String,System.String,Xceed.Zip.EncryptionMethod,Xceed.Compression.CompressionMethod,System.Boolean,System.Boolean,System.Boolean,System.Int64,Xceed.Zip.SplitNameFormat,Xceed.Zip.Sfx.XceedSfxPrefix,Xceed.Zip.QuickZip.DiskRequiredCallback,Xceed.Zip.QuickZip.ByteProgressionCallback,Xceed.Zip.QuickZip.ItemProgressionCallback,System.Object,System.String[])">
      <summary>Adds files to a zip file using an encryption password and either splitting or spanning. Item or byte progression is tracked.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZipException.#ctor(System.String)">
      <summary>Initializes a new instance of the QuickZipException class with the specified message text.</summary>
    </member>
    <member name="M:Xceed.Zip.QuickZipException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the QuickZipException class with specified message text and inner exception.</summary>
    </member>
    <member name="P:Xceed.Zip.QuickZipItem.Comment">
      <summary>Gets the comment of the file.</summary>
    </member>
    <member name="P:Xceed.Zip.QuickZipItem.CompressedSize">
      <summary>Gets the compressed size of the file in bytes.</summary>
    </member>
    <member name="P:Xceed.Zip.QuickZipItem.CompressionMethod">
      <summary>Gets the  used to compress the file.</summary>
    </member>
    <member name="P:Xceed.Zip.QuickZipItem.CompressionRatio">
      <summary>Gets the compression ratio of the file.</summary>
    </member>
    <member name="P:Xceed.Zip.QuickZipItem.Crc32">
      <summary>Gets the checksum of the file.</summary>
    </member>
    <member name="P:Xceed.Zip.QuickZipItem.Encrypted">
      <summary>Gets a value indicating if the file is encrypted.</summary>
    </member>
    <member name="P:Xceed.Zip.QuickZipItem.EncryptionMethod">
      <summary>Gets a value indicating how this file has been encrypted.</summary>
    </member>
    <member name="P:Xceed.Zip.QuickZipItem.EncryptionStrength">
      <summary>Get a value representing the encryption strength of this file in bits, if encrypted using the WinZipAes encryption method.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipArchive.#ctor(Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipArchive.#ctor(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the  class enabling event notifications while the object is being created.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipArchive.BeginUpdate">
      <summary>Prevents a  object from modifying its underlying physical store until the <see cref="M:Xceed.Zip.ZipArchive.EndUpdate" /> method is
called.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipArchive.BeginUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
      <summary>Prevents a  object from modifying its underlying physical store until the <see cref="M:Xceed.Zip.ZipArchive.EndUpdate" /> method is
called and raises events during the process.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipArchive.EndUpdate">
      <summary>Informs a  object to apply to its underlying physical store all the modifications that have been made since the call to
<see cref="M:Xceed.Zip.ZipArchive.BeginUpdate" /></summary>
    </member>
    <member name="M:Xceed.Zip.ZipArchive.EndUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
      <summary>Informs a  object to apply to its underlying physical store all the modifications that have been made since the call to
<see cref="M:Xceed.Zip.ZipArchive.BeginUpdate" /> and raises events during the process.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.AesAlgorithmManager">
      <summary>Gets or sets a manager object for the AES encryption functionality.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.AllowSpanning">
      <summary>Gets or sets a boolean value indicating if the zip file is allowed to span disks.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.Comment">
      <summary>Gets or sets the zip file's comment.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultCompressionLevel">
      <summary>Gets or sets the default  that will be applied to the file(s) that are added to the zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultCompressionMethod">
      <summary>Gets or sets the default  that will be applied to the file(s) that are added to the zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultDecryptionPassword">
      <summary>Gets or sets the default decryption password to use when decompressing files.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultEncryptionMethod">
      <summary>Gets or sets the default EncryptionMethod to use when copying files into this ZipArchive.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultEncryptionPassword">
      <summary>Gets or sets the default encryption password that will be used to encrypt the files that are added to the zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultEncryptionStrength">
      <summary>Gets or sets the default encryption strength (in bits) to use when encrypting files with the WinZipAes encryption method. Possible values are
128, 192 and 256.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultExtraHeaders">
      <summary>Gets or sets the default extra headers of the items that are added to the zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultFolderPersistence">
      <summary>
        <para>Gets or sets a value that indicates whether folder entries will be persisted by default in the Zip archive.</para>
      </summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultTempFolder">
      <summary>Gets or sets the folder that will be used, by default, as the temporary folder.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultTextEncoding">
      <summary>Gets or sets the default text encoding that will be applied to files that are added to the zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.DefaultUnicodeUsagePolicy">
      <summary>Gets or sets the default Unicode usage policy that will be applied to files that are added to the zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.PendingActionCount">
      <summary>Gets a value indicating the number of pending actions on the archive.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.SfxPrefix">
      <summary>Gets or sets the SFX data that will be prefixed to the begining of the zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.SplitNameFormat">
      <summary>Gets or sets the naming convention the split zip file parts will follow when the zip file is created or the next time it is updated.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.SplitSize">
      <summary>Gets or sets the size, in bytes, that each split zip file part will have when the zip file is created or the next time it is updated.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.TempFolder">
      <summary>Gets or sets the folder where the temporary zip file will be created.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipArchive.ZipFile">
      <summary>Gets a reference to the zip file around which the  object is created.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEvents.CreateSession(System.Object,System.Object)">
      <summary>Creates a new session from a  object.</summary>
      <returns>A reference to a  object.</returns>
    </member>
    <member name="M:Xceed.Zip.ZipEvents.OnBuildingZipByteProgression(System.Object,Xceed.FileSystem.ByteProgressionEventArgs)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEvents.OnBuildingZipItemProgression(System.Object,Xceed.FileSystem.ItemProgressionEventArgs)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEvents.OnDiskRequired(System.Object,Xceed.Zip.DiskRequiredEventArgs)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEvents.OnGatheringZipContentByteProgression(System.Object,Xceed.FileSystem.ByteProgressionEventArgs)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEvents.OnReadingZipItemProgression(System.Object,Xceed.FileSystem.ItemProgressionEventArgs)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEvents.WantsBuildingZipByteProgression">
      <summary>Gets a boolean value indicating if the  object has subscribed to the <see cref="E:Xceed.Zip.ZipEvents.BuildingZipByteProgression" />
event.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEvents.WantsBuildingZipItemProgression">
      <summary>Gets a boolean value indicating if the  object has subscribed to the <see cref="E:Xceed.Zip.ZipEvents.BuildingZipItemProgression" />
event.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEvents.WantsCopyingZipByteProgression">
      <summary>Gets a boolean value indicating if the  object has subscribed to the CopyingZipByteProgression event.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEvents.WantsDiskRequired">
      <summary>Gets a boolean value indicating if the  object has subscribed to the <see cref="E:Xceed.Zip.ZipEvents.DiskRequired" /> event.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEvents.WantsGatheringZipContentByteProgression">
      <summary>Gets a boolean value indicating if the  object has subscribed to the
<see cref="E:Xceed.Zip.ZipEvents.GatheringZipContentByteProgression" /> event.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEvents.WantsReadingZipItemProgression">
      <summary>Gets a boolean value indicating if the  object has subscribed to the <see cref="E:Xceed.Zip.ZipEvents.ReadingZipItemProgression" />
event.</summary>
    </member>
    <member name="E:Xceed.Zip.ZipEvents.BuildingZipByteProgression">
      <summary>Raised every time a target zip file is being built, providing byte progression information to the event handler.</summary>
    </member>
    <member name="E:Xceed.Zip.ZipEvents.BuildingZipItemProgression">
      <summary>Raised every time a target zip file is being built, providing item progression information to the event handler.</summary>
    </member>
    <member name="E:Xceed.Zip.ZipEvents.DiskRequired">
      <summary>Raised when a new disk or split part is required.</summary>
    </member>
    <member name="E:Xceed.Zip.ZipEvents.GatheringZipContentByteProgression">
      <summary>Raised during the step preceding the actual creation of the target zip file, where files to keep from the original zip file (the ones that were
not modified) are gathered to a temporary location before overwriting the zip file.</summary>
    </member>
    <member name="E:Xceed.Zip.ZipEvents.ReadingZipItemProgression">
      <summary>Raised every time a zip file is being read for the first time or being refreshed, providing progression information to the event handler.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.#ctor(Xceed.Zip.ZipEvents,System.Object,System.Object)">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.InitializeCurrentTotalBytes(System.Int64)">
      <summary>Initializes the total amount of bytes for the current zip item to be processed.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.InitializeTotalBytes(System.Int64)">
      <summary>Initializes the total amount of bytes for all zip items to be processed.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.InitializeTotalItems(System.Int64)">
      <summary>Initializes the total amount of zip items to be processed.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnBuildingZipByteCompletion">
      <summary>The last  event raised once processing of a zip item is completed.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnBuildingZipByteProgression(System.Int64)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnBuildingZipItemCompletion">
      <summary>The last  event raised once processing is completed.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnBuildingZipItemProgression(Xceed.FileSystem.FileSystemItem)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnCopyingZipByteCompletion">
      <summary>
        <b>OBSOLETE : You can override  to get status on the step preceding the
creation of the zip file.</b> The last CopyingZipByteProgression event raised once processing for a zip file is completed.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnDiskRequired(Xceed.Zip.DiskRequiredEventArgs)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnGatheringZipContentByteCompletion">
      <summary>The last  event raised once processing is completed.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnGatheringZipContentByteProgression(System.Int64)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnReadingZipItemCompletion">
      <summary>The last  event raised once processing is completed.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipEventsSession.OnReadingZipItemProgression(Xceed.FileSystem.FileSystemItem)">
      <summary>Raises the  event.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEventsSession.Events">
      <summary>Gets the original ZipEvents object that was used to create the session.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEventsSession.ZipAllFileBytes">
      <summary>Gets the ProgressionInfo object representing the byte count information
in regards to all the items to be processed for the current sesstion.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEventsSession.ZipAllItems">
      <summary>Gets the ProgressionInfo object representing the item count information
for the current session.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipEventsSession.ZipCurrentFileBytes">
      <summary>Gets the ProgressionInfo object representing the byte count information
in regards to the current item being processed for the current session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_buildingZipByteProgressionArgs">
      <summary>An instance of the  class that provides byte progression information for the current session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_buildingZipItemProgressionArgs">
      <summary>An instance of the  class that provides item progression information for the current session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_copyingZipByteProgressionArgs">
      <summary>An instance of the  class that provides byte progression information for the current session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_gatheringZipContentByteProgressionArgs">
      <summary>An instance of the  class that provides byte progression information for the current session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_readingZipItemProgressionArgs">
      <summary>An instance of the  class that provides item progression information for the current session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_zipAllFilesBytes">
      <summary>An instance of the ProgressionInfo class representing the byte count information in regards to all the items to be processed for the current
session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_zipAllItems">
      <summary>An instance of the ProgressionInfo class representing the item count information for the current session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_zipCurrentFileBytes">
      <summary>An instance of the ProgressionInfo class representing the byte count information in regards to the current item being processed for the current
session.</summary>
    </member>
    <member name="F:Xceed.Zip.ZipEventsSession.m_zipEvents">
      <summary>An instance of the  class representing the original <see cref="T:Xceed.Zip.ZipEvents" /> object from which we created the session.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipException.#ctor(System.String)">
      <summary>Initializes a new instance of the ZipException class with the specified message text.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipException.#ctor(System.String,Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the ZipException class with the specified message text and  object.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipException.#ctor(System.String,Xceed.FileSystem.AbstractFile,System.Exception)">
      <summary>Initializes a new instance of the ZipException class with the specified message text,  object and inner
exception.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipException.#ctor(System.String,Xceed.FileSystem.AbstractFile,Xceed.FileSystem.FileSystemItem)">
      <summary>Initializes a new instance of the ZipException class with the specified message text,  and
<see cref="T:Xceed.FileSystem.FileSystemItem" /> objects.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipException.#ctor(System.String,Xceed.FileSystem.AbstractFile,Xceed.FileSystem.FileSystemItem,System.Exception)">
      <summary>Initializes a new instance of the ZipException class with the specified message text,  and
<see cref="T:Xceed.FileSystem.FileSystemItem" /> objects and inner exception.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipException.Message">
      <summary>Gets a message that describes the current exception.</summary>
    </member>
    <member name="P:Xceed.Zip.ZipException.ZipFile">
      <summary>Gets or sets an  object representing the zip file in which the current exception occurred.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipIOException.#ctor">
      <summary>Initializes a new instance of the ZipIOException class.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipIOException.#ctor(System.String)">
      <summary>Initializes a new instance of the ZipIOException class with the specified message text.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipIOException.#ctor(Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the ZipIOException class with the specified  object.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipIOException.#ctor(System.String,Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the ZipIOException class with the specified message text and  object.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipIOException.#ctor(Xceed.FileSystem.AbstractFile,System.Exception)">
      <summary>Initializes a new instance of the ZipIOException class with the specified  object and inner exception.</summary>
    </member>
    <member name="M:Xceed.Zip.ZipIOException.#ctor(System.String,Xceed.FileSystem.AbstractFile,System.Exception)">
      <summary>Initializes a new instance of the ZipIOException class with the specified message text,  object and inner
exception.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.#ctor(Xceed.FileSystem.AbstractFile,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.#ctor(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile,System.String)">
      <summary>Initializes a new instance of the  class enabling event notifications while the object is being created.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoApplyPropertiesFrom(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
      <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoApplyPropertiesTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
      <summary>Copies the files properties to another item.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Creates the physical file in the zip file.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Permanently deletes the file within the zip file.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Re-reads the information from the physical item.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.EnsureDateIsValid(System.DateTime)">
      <summary>Ensures that the  value is valid.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.Finalize">
      <summary>Allows the ZippedFile object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.IsPathRooted(System.String)">
      <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
      <returns>false since files in the zip file are not rooted.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
      <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
      <returns>true if the source and target  objects represent the same physical entity; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
      <summary>Opens the file for reading with the specified  constant.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare,System.String)">
      <summary>Opens the file for reading with the specified  constant and password.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
      <summary>Opens the file for writing with the specified  constant</summary>
      <returns>A  object that can be used to write data to the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.String)">
      <summary>Opens the file for writing with the specified  constant and password.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.String,Xceed.Zip.EncryptionMethod,System.Int32)">
      <summary>Opens the file for writing with the specified  constant, and the specified encryption method, password and strength.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenRead(System.String)">
      <summary>Opens the file for reading specifying a decryption password.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenRead(System.IO.FileShare,System.String)">
      <summary>Opens the file for reading with the specified file sharing mode and decryption password.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
      <summary>Opens the file for reading with the specified decryption password and raises events during the process.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,System.IO.FileShare,System.String)">
      <summary>Opens the file for reading with the specified file sharing mode and decryption password, and raises events during the process.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenWrite(System.Boolean,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.String)">
      <summary>Opens the file for writing providing an encryption password and specifying if existing data should be replaced.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenWrite(Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.String,Xceed.Zip.EncryptionMethod,System.Int32)">
      <summary>Opens the file for writing providing encryption method, password and strength, and specifying if existing data should be replaced.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenWrite(System.Boolean,System.IO.FileShare,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.String)">
      <summary>Opens the file for writing providing an encryption password and file sharing mode as well as specifying if existing data should be replaced.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.String)">
      <summary>Opens the file for writing providing an encryption password and specifying if existing data should be replaced. Events will be raised during the
process.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.String,Xceed.Zip.EncryptionMethod,System.Int32)">
      <summary>Opens the file for writing providing an encryption method, password and strength, and specifying if existing data should be replaced. Events will
be raised during the process.</summary>
      <returns></returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.IO.FileShare,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,System.String)">
      <summary>Opens the file for writing providing an encryption password and file sharing mode as well as specifying if existing data should be replaced.
Events will be raised during the process.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.Comment">
      <summary>Gets or sets the file's comment.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.CompressedSize">
      <summary>Gets the file's compressed size in bytes.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.CompressionLevel">
      <summary>Gets the  level that was used to compress the file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.CompressionMethod">
      <summary>Gets the  that was used to compress the file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.Crc32">
      <summary>Gets the file's uncompressed data CRC checksum.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DiskNumber">
      <summary>Gets a value indicating on which disk or in which split zip file part the file is located.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoAttributes">
      <summary>Gets or sets the attributes of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoCreationDateTime">
      <summary>Gets or sets the creation date and time of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoExists">
      <summary>Gets a boolean value indicating if the item physically exists.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoFullName">
      <summary>Gets the full name of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoHasCreationDateTime">
      <summary>Gets a boolean value indicating if the file supports having a creation date and time.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoHasLastAccessDateTime">
      <summary>Gets a boolean value indicating if the file supports having a last access date and time.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoLastAccessDateTime">
      <summary>Gets or sets the last access date and time of the file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoLastWriteDateTime">
      <summary>Gets or sets the modification date and time of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoName">
      <summary>Gets or sets the filename, without path, of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoParentFolder">
      <summary>Gets a reference to the parent folder of this item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoRootFolder">
      <summary>Gets a reference to the root folder of this item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.DoSize">
      <summary>Gets the size of the file in bytes.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.Encrypted">
      <summary>Gets a boolean value indicating if the file has been encrypted.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.EncryptionMethod">
      <summary>Gets a value indicating how this file has been encrypted.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.EncryptionStrength">
      <summary>Get a value representing the encryption strength of this file in bits, if encrypted using the WinZipAes encryption method.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.ExtraHeaders">
      <summary>Gets or sets the file's extra headers.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.HostFile">
      <summary>Gets the zip archive file containing this zipped file entry.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.TextEncoding">
      <summary>Gets the default text encoding that will be applied to files that are added to the zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFile.UnicodeUsagePolicy">
      <summary>Gets the default Unicode usage policy that will be applied to files that are added to the zip file.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.#ctor(Xceed.FileSystem.AbstractFile,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.#ctor(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile,System.String)">
      <summary>Initializes a new instance of the  class enabling event notifications while the object is being created.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.DoApplyPropertiesTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
      <summary>Copies the zipped folder's properties to another item.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Creates the physical zipped folder.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Permanently deletes the physical zipped folder.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Retrieves an array of  objects contained within the zipped folder.</summary>
      <returns>An array of  objects representing the items ( files and folders ) contained within the zipped folder.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
      <summary>Retrieves a reference to an  object contained within the zipped folder.</summary>
      <returns>A reference to an  object regardless of if the file represented by the object exists or not.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
      <summary>Retrieves a reference to an  object contained within the zipped folder.</summary>
      <returns>A reference to an  object regardless of if the folder represented by the object exists or not.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Re-reads the information from the physical item.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.EnsureDateIsValid(System.DateTime)">
      <summary>Ensures that the  value is valid.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.Finalize">
      <summary>Allows the ZippedFolder object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.IsPathRooted(System.String)">
      <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
      <returns>false since folders in zip files are not rooted.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
      <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
      <returns>true if the source and target  objects represent the same physical entity; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.ListCopyTo(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
      <summary>Copies each item in the  object's list to each item's destination.</summary>
      <returns>A reference to a  object representing the target item of the <b>first</b><see cref="T:Xceed.FileSystem.ItemPair" />.</returns>
    </member>
    <member name="M:Xceed.Zip.ZippedFolder.OnCreated(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Called when a client explicitly calls Create.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.Comment">
      <summary>Gets or sets the folder's comment.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DiskNumber">
      <summary>Gets a value indicating on which disk or in which split zip file part the folder is located.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoAttributes">
      <summary>Gets or sets the attributes of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoCreationDateTime">
      <summary>Gets or sets the creation date and time of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoExists">
      <summary>Gets a boolean value indicating if the item physically exists.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoFullName">
      <summary>Gets the full name of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoHasCreationDateTime">
      <summary>Gets a boolean value indicating if the folder supports having a creation date and time.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoHasLastAccessDateTime">
      <summary>Gets a boolean value indicating if the folder supports having a last access date and time.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoLastAccessDateTime">
      <summary>Gets or sets the last access date and time of the folder.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoLastWriteDateTime">
      <summary>Gets or sets the modification date and time of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoName">
      <summary>Gets or sets the filename, without path, of the item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoParentFolder">
      <summary>Gets a reference to the parent folder of this item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.DoRootFolder">
      <summary>Gets a reference to the root folder of this item.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.ExtraHeaders">
      <summary>Gets or sets the folder's extra headers.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.HostFile">
      <summary>Gets the zip archive file containing this zipped folder entry.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.Persistent">
      <summary>
        <para>Gets or sets a value that indicates whether the folder entry will be persisted in the Zip archive.</para>
      </summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.TextEncoding">
      <summary>Gets the default text encoding that will be applied to files that are added to the zip folder.</summary>
    </member>
    <member name="P:Xceed.Zip.ZippedFolder.UnicodeUsagePolicy">
      <summary>Gets the default Unicode usage policy that will be applied to files that are added to the zip folder.</summary>
    </member>
    <member name="T:Xceed.Zip.BuildingZipByteProgressionEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Zip.BuildingZipItemProgressionEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Zip.CopyingZipByteProgressionEventHandler">
      <summary>
        <b>OBSOLETE : The CopyZipByteProgressionEvent is no longer raised. Use the  event
instead.</b> Represents the method that will handle the CopyingZipByteProgression event.</summary>
    </member>
    <member name="T:Xceed.Zip.DiskRequiredEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Zip.GatheringZipContentByteProgressionEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Zip.QuickZip.ByteProgressionCallback">
      <summary>Delegate for ByteProgression notification.</summary>
    </member>
    <member name="T:Xceed.Zip.QuickZip.DiskRequiredCallback">
      <summary>Represents the method that is mapped to DiskRequiredCallback.</summary>
    </member>
    <member name="T:Xceed.Zip.QuickZip.ItemProgressionCallback">
      <summary>Delegate for ItemProgression notification.</summary>
    </member>
    <member name="T:Xceed.Zip.ReadingZipItemProgressionEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.Licenser">
      <summary>Class which is used to register the classes located in the Xceed.Zip.ReaderWriter namespace.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipEndHeader">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Class that represents the "Ending Header" of a Zip file. This header allows you to specify a comment for the zip file.</span>
      </summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipItemLocalHeader">
      <summary>Represents the local file header of an item in a Zip file.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipReader">
      <summary>Represents an object used to read a Zip file passed to it as a stream.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipReaderByteProgressionEventArgs">
      <summary>Provides byte progression information.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipReaderException">
      <summary>Exception that is thrown when an exception occurs while reading from the Zip file.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipReaderInvalidPasswordEventArgs">
      <summary>Provides information for use when an invalid password has been supplied.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipWriter">
      <summary>Represents an object used to create and write to a Zip file passed to it as a stream.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipWriterByteProgressionEventArgs">
      <summary>Provides byte progression information.</summary>
    </member>
    <member name="T:Xceed.Zip.ReaderWriter.ZipWriterException">
      <summary>Exception that is thrown when an exception occurs while writing to the Zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.Licenser.LicenseKey">
      <summary>Gets or sets the license key used to license this product.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipEndHeader.#ctor">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Initializes a new instance of the <strong>ZipEndHeader</strong>class.</span>
      </summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipEndHeader.ZipComment">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Gets or sets the zip file's comment.</span>
      </summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.#ctor">
      <summary>Initializes a new instance of the <strong>ZipItemLocalHeader</strong> class.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.#ctor(System.String)">
      <summary>Initializes a new instance of the ZipItemLocalHeader class, using the
provided file name.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.#ctor(System.String,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
      <summary>Initializes a new instance of the ZipItemLocalHeader class, using the
provided file name and the compression method and level.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.#ctor(System.String,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel,Xceed.Zip.EncryptionMethod,System.String)">
      <summary>Initializes a new instance of the ZipItemLocalHeader class, using the
provided file name, the compression method and level, and the encryption method and password.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.Clone">
      <summary>Creates a copy of this ZipItemLocalHeader.</summary>
      <returns>The ZipItemLocalHeader this method creates.</returns>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.Comment">
      <summary>Gets or sets the comment of the item in the Zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.CompressionLevel">
      <summary>Gets or sets the compression level used to compress the file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.CompressionMethod">
      <summary>Gets or sets the compression method used to compress the file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.EncryptionMethod">
      <summary>Gets or sets the encryption method used on the item in the Zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.EncryptionPassword">
      <summary>Gets or sets the password to use to encrypt or decrypt the item in a Zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipItemLocalHeader.FileName">
      <summary>Gets or sets the name of the item in the Zip file.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <strong>ZipReader</strong> class, using the provided input stream, and using an empty decryption password and
not allowing the object to close the input stream.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of the <strong>ZipReader</strong> class using the specified input stream and decryption password, and not allowing the
object to close the input stream.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <strong>ZipReader</strong> class using the specified input stream, an empty decryption password, and optionally
allowing the object to close the input stream.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.#ctor(System.IO.Stream,System.Boolean,System.String)">
      <summary>Initializes a new instance of the <strong>ZipReader</strong> class using the specified input stream, decryption password, and optionally allowing
the object to close the input stream.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.Dispose">
      <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.GetItemDataStream">
      <summary>Returns a new Stream object that implements a read-only stream around the ReadItemData method.</summary>
      <returns>A read-only System.IO.Stream object.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.ReadItemData">
      <summary>Reads a sequence of bytes from the ZipReader's stream and advances the
position within by the number of bytes read.</summary>
      <returns>The total number of bytes read into <em>buffer</em>. This can be less than the number of bytes requested if that many bytes are not currently
available, or zero (0) if the end of the stream has been reached.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.ReadItemLocalHeader">
      <summary>Reads the local header of the current item from the Zip file.</summary>
      <returns>A ZipItemLocalHeader object representing the local header of the
current item.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.Dispose">
      <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.Dispose(System.Boolean)">
      <summary>Provides correct cleanup of resources in the base class and its derived classes, specifying whether this method was called by another method such
as Close or Dispose, or by the finalizer.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.ReadEndHeader">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Reads the "Ending Header" in the zip stream and returns a ZipEndHeader object.</span>
      </summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.ReadItemData(System.IO.Stream)">
      <summary>Reads the entire contents of an item's data into a specified stream.</summary>
      <returns>Returns the actual number of bytes written to the specified stream, or 0 if the end of the item's data has been reached.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.ReadItemData(System.IO.Stream,System.Int32)">
      <summary>Reads the entire contents of an item's data into a specified stream.</summary>
      <returns>Returns the actual number of bytes written to the specified stream, or 0 if the end of the item's data has been reached.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.ReadItemData(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the entire contents of an item's data into a specified stream.</summary>
      <returns>Returns the actual number of bytes written to the specified stream, or 0 if the end of the item's data has been reached.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.ReadItemData(System.Byte[])">
      <summary>Reads a sequence of bytes from the current item's data into a specified buffer.</summary>
      <returns>Returns the actual number of bytes written to the specified buffer, or 0 if the end of the item's data has been reached.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReader.ReadItemData(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the current item's data into a specified buffer.</summary>
      <returns>Returns the actual number of bytes written to the specified stream, or 0 if the end of the item's data has been reached.</returns>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReader.AesAlgorithmManager">
      <summary>Gets or sets a manager object for the AES encryption functionality.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReader.AllowInputStreamClosure">
      <summary>Gets or sets a boolean value indicating whether the input stream can be closed by the object.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReader.EncryptionPassword">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Gets or sets the encryption password that will be used to decrypt the files that are read from the zip stream.</span>
      </summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReader.InputStream">
      <summary>Gets the input Stream object that was specified at construction.</summary>
    </member>
    <member name="E:Xceed.Zip.ReaderWriter.ZipReader.ByteProgression">
      <summary>Raised when ReadItemData has been called.</summary>
    </member>
    <member name="E:Xceed.Zip.ReaderWriter.ZipReader.InvalidPassword">
      <summary>Raised when the supplied password is invalid.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReaderByteProgressionEventArgs.#ctor(Xceed.Zip.ReaderWriter.ZipItemLocalHeader,System.Int64)">
      <summary>Initializes a new instance of the ZipReaderByteProgressionEventArgs argument class.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReaderByteProgressionEventArgs.#ctor(Xceed.Zip.ReaderWriter.ZipItemLocalHeader,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the ZipReaderByteProgressionEventArgs argument class.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReaderByteProgressionEventArgs.BytesProcessed">
      <summary>Gets the number of bytes processed of the current file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReaderByteProgressionEventArgs.Percent">
      <summary>Gets the percentage of the current file that has been processed.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReaderByteProgressionEventArgs.UncompressedSize">
      <summary>Gets the uncompressed size of the current file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReaderByteProgressionEventArgs.ZipItemLocalHeader">
      <summary>Gets the local header of the item currently being processed.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReaderException.#ctor(System.String)">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Initializes a new instance of the <strong>ZipReaderException</strong> class with the specified message text.</span>
      </summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReaderException.#ctor(System.String,System.Exception)">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Initializes a new instance of the <strong>ZipReaderException</strong> class with the specified message text and inner exception.</span>
      </summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipReaderInvalidPasswordEventArgs.#ctor(Xceed.Zip.ReaderWriter.ZipItemLocalHeader)">
      <summary>Initializes a new instances of the ZipReaderInvalidPasswordEventArgs class.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReaderInvalidPasswordEventArgs.Abort">
      <summary>Gets or sets a boolean value indicating whether the Zip read operation should be aborted.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReaderInvalidPasswordEventArgs.NewPassword">
      <summary>Gets or sets the new password to be used during the Zip read operation.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReaderInvalidPasswordEventArgs.OldPassword">
      <summary>Gets the current password.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipReaderInvalidPasswordEventArgs.ZipItemLocalHeader">
      <summary>Gets the local header of the item currently being read.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.#ctor">
      <summary>Initializes a new instance of the ZipWriter class.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <strong>ZipWriter</strong> class using the specified inner stream.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <strong>ZipWriter</strong> class using the specified inner stream and optionally using Zip64 extensions in the
resulting archive.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <strong>ZipWriter</strong> class using the specified output stream, optionally using Zip64 extensions in the
resulting archive and optionally allowing the object to close the output stream.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.CloseZipFile">
      <summary>Closes the Zip file by writing the data descriptor for the last item and then writing the central header, the end header locator (optionally, for
Zip64), and the end header.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.Dispose">
      <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.GetItemDataStream">
      <summary>Returns a new Stream object that implements a write-only stream around the WriteItemData method.</summary>
      <returns>A write-only System.IO.Stream object.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.WriteItemData">
      <summary>Writes a sequence of bytes to the ZipWriter object's stream and advances the
position within the stream by the number of bytes written.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.WriteItemLocalHeader(Xceed.Zip.ReaderWriter.ZipItemLocalHeader)">
      <summary>Writes a local header to the Zip file.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.CloseZipFile">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Closes the Zip file by writing the data descriptor for the last item and then writing the central header, the end header locator (optionally, for Zip64), and
the end header.</span>
      </summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.CloseZipFile(Xceed.Zip.ReaderWriter.ZipEndHeader)">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Closes the Zip file by writing the data descriptor for the last item and then writing the central header, the end header locator, and the specified end
header.</span>
      </summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.Dispose">
      <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.Dispose(System.Boolean)">
      <summary>Provides correct cleanup of resources in the base class and its derived classes, specifying whether this method was called by another method such
as Close or Dispose, or by the finalizer.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.WriteItemData(System.IO.Stream)">
      <summary>
        <span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: 11px Verdana; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0" class="Apple-style-span">Writes the entire contents of a stream to the ZipWriter object's stream.</span>
      </summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.WriteItemData(System.IO.Stream,System.Int32)">
      <summary>Writes the entire contents of a stream to the ZipWriter object's stream.</summary>
      <returns>A value representing the total number of bytes read from the specified stream.</returns>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.WriteItemData(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: 11px Verdana; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0" class="Apple-style-span">Writes</span>
      </summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.WriteItemData(System.Byte[])">
      <summary>Writes the entire supplied byte array to the ZipWriter object's stream.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriter.WriteItemData(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <span class="Apple-style-span" style="WORD-SPACING: 0px; FONT: 11px Verdana; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BORDER-COLLAPSE: separate; orphans: 2; widows: 2; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0">
Writes a sequence of bytes to the <span class="Apple-converted-space">ZipWriter</span> object's stream and advances the position within the stream by the
number of bytes written.</span>
      </summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipWriter.AesAlgorithmManager">
      <summary>Gets or sets a manager object for the AES encryption functionality.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipWriter.AllowOutputStreamClosure">
      <summary>Gets or sets a boolean value indicating whether the output stream can be closed by the object.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipWriter.AllowUncompressedData">
      <summary>Gets or sets a boolean value indicating whether the ZipWriter is allowed to write true uncompressed data in the Zip archive.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipWriter.AllowZip64Extensions">
      <summary>Gets a boolean value indicating whether Zip64 extensions of the Zip specification are enabled.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipWriter.OutputStream">
      <summary>Gets the output Stream object that was specified at construction.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipWriter.TextEncoding">
      <summary>Gets or sets the text encoding that will be applied to files that are added to the zip archive.</summary>
    </member>
    <member name="E:Xceed.Zip.ReaderWriter.ZipWriter.ByteProgression">
      <summary>Raised when WriteItemData has been called.</summary>
    </member>
    <member name="M:Xceed.Zip.ReaderWriter.ZipWriterByteProgressionEventArgs.#ctor(Xceed.Zip.ReaderWriter.ZipItemLocalHeader,System.Int64)">
      <summary>Initializes a new instance of the ZipWriterByteProgressionEventArgs class.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipWriterByteProgressionEventArgs.BytesProcessed">
      <summary>Gets the number of bytes processed of the current file.</summary>
    </member>
    <member name="P:Xceed.Zip.ReaderWriter.ZipWriterByteProgressionEventArgs.ZipItemLocalHeader">
      <summary>Gets the local header of the item currently being processed.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.Buttons">
      <summary>Value representing the captions for all the buttons that are shown by self-extracting zip files created with the Xceed Zip Self-Extractor binary.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.DialogMessages">
      <summary>Value representing the texts that are displayed by the various dialog boxes shown by self-extracting zip files.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.DialogStrings">
      <summary>Value representing label captions and other miscellaneous texts that are found inside the various dialog boxes displayed by self-extracting zip
files. The maximum string length allowed for each entry in this property is 255 characters, except for the Title entry, which can only be 100 characters long.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.ExistingFileBehavior">
      <summary>Value which lets you determine the overwrite behavior exhibited by self-extracting zip files whenever files being extracted already exist in the
destination folder.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.ButtonCaptionList">
      <summary>Contains a list of button captions used by the  class.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.DialogMessageList">
      <summary>Contains a list of dialog messages used by the  class.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.DialogStringList">
      <summary>Contains a list of dialog strings used by the  class.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.ExtensionAssociation">
      <summary>Represents a file extension association that the self-extractor will register with Windows</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.ExtensionAssociationList">
      <summary>Contains a list of extension associations.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.FileCopy">
      <summary>Represents a file that is to be copied from one location to another.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.FileCopyList">
      <summary>Contains a list of files to copy.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.InvalidSfxModuleException">
      <summary>Exception that is thrown when an invalid SFX binary is provided.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.NotifyListBase">
      <summary>Represents a list that provides notification when one if its items changes.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.ProgramGroup">
      <summary>Represents a program group that can be created by self-extracting zip files.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.ProgramGroupItem">
      <summary>Represents an item contained within a .</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.ProgramGroupItemList">
      <summary>Contains a list of program group items.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.RegistryKey">
      <summary>Contains a list of registry keys.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.RegistryKeyList">
      <summary>Contains a list of registry keys.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.SfxPrefix">
      <summary>Represents a generic zip file SFX prefix and exposes properties and methods that allow the SFX prefix to be read and written.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.StringList">
      <summary>Contains a list of strings used by the  class to represent the messages and strings contained in the dialogs.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.Variables">
      <summary>Contains variables which are used by various properties of the Self-Extractor binary to dynamically provide paths and filenames.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.XceedSfxPrefix">
      <summary>Specialization of the  class which creates self-extracting zip files.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ButtonCaptionList.Clear">
      <summary>Removes all the captions from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ButtonCaptionList.Contains(System.String)">
      <summary>Retrieves a boolean value indicating if a specific caption exists in the list.</summary>
      <returns>true if the caption exists in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.ButtonCaptionList.IndexOf(System.String)">
      <summary>Searches for the specified caption and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.ButtonCaptionList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ButtonCaptionList.IsFixedSize">
      <summary>Gets a boolean value indicating if the  has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ButtonCaptionList.IsReadOnly">
      <summary>Gets a boolean value indicating if the  is readonly.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ButtonCaptionList.Item(Xceed.Zip.Sfx.Buttons)">
      <summary>Gets or sets the caption for the specified button.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.DialogMessageList.Clear">
      <summary>Removes all the dialog messages from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.DialogMessageList.Contains(System.String)">
      <summary>Retrieves a boolean value indicating if a specific dialog message exists in the list.</summary>
      <returns>true if the dialog message exists in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.DialogMessageList.IndexOf(System.String)">
      <summary>Searches for the specified dialog message and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.DialogMessageList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.DialogMessageList.IsFixedSize">
      <summary>Gets a boolean value indicating if the  has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.DialogMessageList.IsReadOnly">
      <summary>Gets a boolean value indicating if the  is readonly.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.DialogMessageList.Item(Xceed.Zip.Sfx.DialogMessages)">
      <summary>Gets or sets the specified dialog message.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.DialogStringList.Clear">
      <summary>Removes all the dialog strings from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.DialogStringList.Contains(System.String)">
      <summary>Retrieves a boolean value indicating if a specific dialog string exists in the list.</summary>
      <returns>true if the dialog string exists in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.DialogStringList.IndexOf(System.String)">
      <summary>Searches for the specified dialog string and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.DialogStringList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.DialogStringList.IsFixedSize">
      <summary>Gets a boolean value indicating if the  has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.DialogStringList.IsReadOnly">
      <summary>Gets a boolean value indicating if the  is readonly.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.DialogStringList.Item(Xceed.Zip.Sfx.DialogStrings)">
      <summary>Gets or sets the specified dialog string.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociation.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the ExtensionAssociation class specifying the extension, its description as well as the application to which it
will be associated.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ExtensionAssociation.Application">
      <summary>Gets or sets the application to which the  is associated.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ExtensionAssociation.Description">
      <summary>Gets or sets the description of the extension association.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ExtensionAssociation.Extension">
      <summary>Gets or sets the file extension to associate.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.AddRange(Xceed.Zip.Sfx.ExtensionAssociation[])">
      <summary>Adds the elements of an extension associations array to the end of the ExtensionAssociationList collection.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.Clear">
      <summary>Removes all extension associations from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.Contains(Xceed.Zip.Sfx.ExtensionAssociation)">
      <summary>Retrieves a boolean value indicating if a specific extension association exists in the list.</summary>
      <returns>true if the extension association exists in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.IndexOf(Xceed.Zip.Sfx.ExtensionAssociation)">
      <summary>Searches for the specified extension association and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.Insert(System.Int32,Xceed.Zip.Sfx.ExtensionAssociation)">
      <summary>Inserts an extension association into the list at the specified index</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.Remove(Xceed.Zip.Sfx.ExtensionAssociation)">
      <summary>Removes the extension association from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.RemoveAt(System.Int32)">
      <summary>Removes the extension association from the list at the specified index.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.Add(Xceed.Zip.Sfx.ExtensionAssociation)">
      <summary>Adds an extension association to the list.</summary>
      <returns>The zero-based index at which the extension association was added.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.ExtensionAssociationList.Add(System.String,System.String,System.String)">
      <summary>Adds an extension association to the list specifying to which application to associate the specified extension.</summary>
      <returns>The zero-based index at which the extension association was added.</returns>
    </member>
    <member name="P:Xceed.Zip.Sfx.ExtensionAssociationList.IsFixedSize">
      <summary>Gets a boolean value indicating if the ExtensionAssociationList has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ExtensionAssociationList.IsReadOnly">
      <summary>Gets a boolean value indicating if the ExtensionAssociationList is readonly.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ExtensionAssociationList.Item(System.Int32)">
      <summary>Gets the extension association at the specified index.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopy.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the FileCopy class specifying the path and name of both the file to copy and the destitination file.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.FileCopy.DestinationFileName">
      <summary>Gets or sets the path and name of the destination file.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.FileCopy.SourceFileName">
      <summary>Gets or sets the path and name of the file to copy.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.AddRange(Xceed.Zip.Sfx.FileCopy[])">
      <summary>Adds the elements of an  array to the end of the FileCopyList collection.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.Clear">
      <summary>Removes all files from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.Contains(Xceed.Zip.Sfx.FileCopy)">
      <summary>Retrieves a boolean value indicating if a specific file exists in the list.</summary>
      <returns>true if the file exists in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.IndexOf(Xceed.Zip.Sfx.FileCopy)">
      <summary>Searches for the specified file and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.Insert(System.Int32,Xceed.Zip.Sfx.FileCopy)">
      <summary>Inserts a file into the list at the specified index</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.Remove(Xceed.Zip.Sfx.FileCopy)">
      <summary>Removes the file from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.RemoveAt(System.Int32)">
      <summary>Removes the file from the list at the specified index.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.Add(Xceed.Zip.Sfx.FileCopy)">
      <summary>Adds a file to the list.</summary>
      <returns>The zero-based index at which the file was added.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.FileCopyList.Add(System.String,System.String)">
      <summary>Adds a file to the list specifying the path and name of both the file to copy and the destination file.</summary>
      <returns>The zero-based index at which the file was added.</returns>
    </member>
    <member name="P:Xceed.Zip.Sfx.FileCopyList.IsFixedSize">
      <summary>Gets a boolean value indicating if the FileCopyList has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.FileCopyList.IsReadOnly">
      <summary>Gets a boolean value indicating if the FileCopyList is readonly.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.FileCopyList.Item(System.Int32)">
      <summary>Gets the file at the specified index.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.InvalidSfxModuleException.#ctor">
      <summary>Initializes a new instance of the InvalidSfxModuleException execption using the default message text.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.InvalidSfxModuleException.#ctor(System.String)">
      <summary>Initializes a new instance of the InvalidSfxModuleException execption using the specified message text.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.NotifyListBase.OnClear(System.Boolean@)">
      <summary>Performs additional custom processes when clearing the contents of the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.NotifyListBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>Performs additional custom processes after inserting a new element into the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.NotifyListBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>Performs additional custom processes after removing an element from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.NotifyListBase.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes after setting a value in the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroup.#ctor(System.String)">
      <summary>Initializes a new program group specifying its title.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ProgramGroup.Items">
      <summary>Gets a list of the program group items contained within the program group.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ProgramGroup.Title">
      <summary>Gets or sets the title of the program group.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItem.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the ProgramGroupItem class specifying its description and the file which it opens.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ProgramGroupItem.Description">
      <summary>Gets or sets the description of the program group item.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ProgramGroupItem.FileToOpen">
      <summary>Gets or sets the path and name of the file the program group item will open when selected.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.AddRange(Xceed.Zip.Sfx.ProgramGroupItem[])">
      <summary>Adds the elements of an program group items array to the end of the ProgramGroupItemList collection.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.Clear">
      <summary>Removes all program group items from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.Contains(Xceed.Zip.Sfx.ProgramGroupItem)">
      <summary>Retrieves a boolean value indicating if a specific program group item exists in the list.</summary>
      <returns>true if the program group item exists in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.IndexOf(Xceed.Zip.Sfx.ProgramGroupItem)">
      <summary>Searches for the specified program group item and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.Insert(System.Int32,Xceed.Zip.Sfx.ProgramGroupItem)">
      <summary>Inserts an program group item into the list at the specified index</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.Remove(Xceed.Zip.Sfx.ProgramGroupItem)">
      <summary>Removes the program group item from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.RemoveAt(System.Int32)">
      <summary>Removes the program group item from the list at the specified index.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.Add(Xceed.Zip.Sfx.ProgramGroupItem)">
      <summary>Adds a program group item to the list.</summary>
      <returns>The zero-based index at which the program group item was added.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.ProgramGroupItemList.Add(System.String,System.String)">
      <summary>Adds a program group item to the list specifying its description and the file which it opens.</summary>
      <returns>The zero-based index at which the program group item was added.</returns>
    </member>
    <member name="P:Xceed.Zip.Sfx.ProgramGroupItemList.IsFixedSize">
      <summary>Gets a boolean value indicating if the ProgramGroupItemList has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ProgramGroupItemList.IsReadOnly">
      <summary>Gets a boolean value indicating if the ProgramGroupItemList is readonly.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.ProgramGroupItemList.Item(System.Int32)">
      <summary>Gets the program group item at the specified index.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKey.#ctor(System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the RegistryKey class specifying the registry key name, the value name and the value.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.RegistryKey.KeyName">
      <summary>Gets or sets the name of the registry key.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.RegistryKey.Value">
      <summary>Gets or sets the value of the registry key.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.RegistryKey.ValueName">
      <summary>Gets or sets the name of the value to add.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.AddRange(Xceed.Zip.Sfx.RegistryKey[])">
      <summary>Adds the elements of a registry key array to the end of the RegistryKeyList collection.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.Clear">
      <summary>Removes all registry keys from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.Contains(Xceed.Zip.Sfx.RegistryKey)">
      <summary>Retrieves a boolean value indicating if a specific registry key exists in the list.</summary>
      <returns>true if the registry key exists in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.IndexOf(Xceed.Zip.Sfx.RegistryKey)">
      <summary>Searches for the specified registry key and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.Insert(System.Int32,Xceed.Zip.Sfx.RegistryKey)">
      <summary>Inserts a registry key into the list at the specified index</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.Remove(Xceed.Zip.Sfx.RegistryKey)">
      <summary>Removes the registry key from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.RemoveAt(System.Int32)">
      <summary>Removes the registry key from the list at the specified index.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.Add(Xceed.Zip.Sfx.RegistryKey)">
      <summary>Adds a registry key to the list.</summary>
      <returns>The zero-based index at which the registry key was added.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.RegistryKeyList.Add(System.String,System.String,System.Object)">
      <summary>Adds a registry key to the list specifying the key name and value.</summary>
      <returns>The zero-based index at which the registry key was added.</returns>
    </member>
    <member name="P:Xceed.Zip.Sfx.RegistryKeyList.IsFixedSize">
      <summary>Gets a boolean value indicating if the RegistryKeyList has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.RegistryKeyList.IsReadOnly">
      <summary>Gets a boolean value indicating if the RegistryKeyList is readonly.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.RegistryKeyList.Item(System.Int32)">
      <summary>Gets the registry key at the specified index.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.SfxPrefix.#ctor">
      <summary>Initializes a new instance of the SfxPrefix class.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.SfxPrefix.#ctor(Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the SfxPrefix class specifying the SFX source binary to use as the zip file's prefix.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.SfxPrefix.OnChanged">
      <summary>Notifies the zip file that its SFX prefix has changed.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.SfxPrefix.SetInternalSourceModule(Xceed.FileSystem.MemoryFile)">
      <summary>Sets a reference to the SFX source binary.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.SfxPrefix.SetSourceModule(Xceed.FileSystem.AbstractFile)">
      <summary>Sets the SFX source binary that will be used as the zip file's prefix.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.SfxPrefix.WriteSfxPrefix(System.IO.Stream)">
      <summary>Writes the contents of the SFX source binary to the zip file's prefix.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.SfxPrefix.SourceModuleSize">
      <summary>Gets the size of the SFX source binary.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.Add(System.String)">
      <summary>Adds a string to the list.</summary>
      <returns>The zero-based index at which the string was added.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.AddRange(System.String[])">
      <summary>Adds the elements of a string array to the end of the StringList collection.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.Clear">
      <summary>Removes all strings from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.Contains(System.String)">
      <summary>Retrieves a boolean value indicating if a specific string exists in the list.</summary>
      <returns>true if the string exists in the list; false otherwise.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.IndexOf(System.String)">
      <summary>Searches for the specified string and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.Insert(System.Int32,System.String)">
      <summary>Inserts a string into the list at the specified index</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.Remove(System.String)">
      <summary>Removes the string from the list.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.StringList.RemoveAt(System.Int32)">
      <summary>Removes the string from the list at the specified index.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.StringList.IsFixedSize">
      <summary>Gets a value indicating whether the StringList has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.StringList.IsReadOnly">
      <summary>Gets a boolean value indicating if the StringList is readonly.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.StringList.Item(System.Int32)">
      <summary>Gets or sets the string at the specified index.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.DestinationFile">
      <summary>The path and filename of the file to overwrite. Used only by the  dialog.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.DestinationFolder">
      <summary>The unzipping folder or the user-selected folder where files were unzipped to.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.DiskNumber">
      <summary>The number of the requested disk. Used only by the  dialog.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.ErrorNumber">
      <summary>The error code that caused the failure. Used only by the  dialog.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.ProgramFilesFolder">
      <summary>The location of the Program Files folder.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.RandomFolder">
      <summary>Random folder name that doesn't already exist. (the format of the random name is: _SFXxxx, where xxx is a random number)</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.SfxFolder">
      <summary>The folder where the self-extracting zip file is being run from.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.SystemDrive">
      <summary>The main system hard disk.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.SystemFolder">
      <summary>The location of the Windows System folder.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.TempFolder">
      <summary>The location of the system's temporary folder.</summary>
    </member>
    <member name="F:Xceed.Zip.Sfx.Variables.WindowsFolder">
      <summary>The location of the Windows folder.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.XceedSfxPrefix.#ctor(Xceed.FileSystem.AbstractFile)">
      <summary>Initializes a new instance of the XceedSfxPrefix class specifying the source self-extractor binary.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.XceedSfxPrefix.Finalize">
      <summary>Allows the XceedSfxPrefix object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.XceedSfxPrefix.OnChanged">
      <summary>Notifies the zip file that its prefix has changed.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.XceedSfxPrefix.SetInternalSourceModule(Xceed.FileSystem.MemoryFile)">
      <summary>Sets a reference to the source binary and reads the SFX configuration if one is available.</summary>
    </member>
    <member name="M:Xceed.Zip.Sfx.XceedSfxPrefix.WriteSfxPrefix(System.IO.Stream)">
      <summary>Writes the contents of the SFX source binary to the zip file's prefix.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.ButtonCaptions">
      <summary>Gets a list containing the captions of all the buttons that are shown by self-extracting zip files created with the Xceed Zip Self-Extractor
binary.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.DefaultDestinationFolder">
      <summary>Gets or sets the path where the self-extracting zip file extracts files to by default.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.DefaultPassword">
      <summary>Gets or sets the password that the self-extracting zip file will use whenever it tries to unzip an encrypted file.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.DeleteUnzippedFiles">
      <summary>Gets or sets a boolean value indicating if the extracted files should be deleted once all the external programs or executables run by the
self-extracting zip file (as a result of specifying programs to run in the  property) have terminated</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.DialogMessages">
      <summary>Gets a list containing the texts that are displayed by the various dialog boxes shown by the self-extracting zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.DialogStrings">
      <summary>Gets a list containing the label captions and other miscellaneous texts that are found inside the various dialog boxes displayed by the
self-extracting zip file.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.DllsToRegister">
      <summary>Gets a list of DLLs to register using the regsvr32 executable available on 32-bit Windows operating systems once the files are unzipped.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.ExecuteAfter">
      <summary>Gets the path and filenames of one or more external programs or executables that the self-extracting zip file will run upon successfully
extracting its files.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.ExistingFileBehavior">
      <summary>Gets or sets a value representing the overwrite behavior exhibited by self-extracting zip files whenever files are being extracted that already
exist in the destination folder.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.ExtensionsToAssociate">
      <summary>Gets a list of file extensions that the self-extractor will register with Windows.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.FilesToCopy">
      <summary>Gets a list of files to copy to a different folder than the desination unzip folder once the files are unzipped.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.Icon">
      <summary>Gets or sets the icon used by the self-extracting zip file. <b>This property is not supported by Xceed Zip for .NET Compact Framework.</b></summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.ProgramGroup">
      <summary>Gets the program group that the self-extracting zip file will create after successfully unzipping its files.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.RegistryKeys">
      <summary>Gets a list of registry keys that the self-extracting zip file will add or change in the system registry.</summary>
    </member>
    <member name="P:Xceed.Zip.Sfx.XceedSfxPrefix.WriteConfigurationStringsAsUnicode">
      <summary>Gets or sets a value indicating if the configuration strings should be written as unicode strings.</summary>
    </member>
    <member name="T:Xceed.Zip.Sfx.ConfigurationChangedEventsHandler">
      <summary>Represents the method that will handle the ChangedStorage event.</summary>
    </member>
  </members>
</doc>